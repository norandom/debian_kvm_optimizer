#!/bin/bash
# KSM Monitoring Script
# Auto-generated by Ansible - do not edit manually

source /etc/ksm/ksm.conf

LOG_FILE="/var/log/ksm-monitor.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Function to log KSM metrics
log_ksm_metrics() {
    local pages_shared=$(cat /sys/kernel/mm/ksm/pages_shared 2>/dev/null || echo 0)
    local pages_sharing=$(cat /sys/kernel/mm/ksm/pages_sharing 2>/dev/null || echo 0)
    local pages_unshared=$(cat /sys/kernel/mm/ksm/pages_unshared 2>/dev/null || echo 0)
    local pages_volatile=$(cat /sys/kernel/mm/ksm/pages_volatile 2>/dev/null || echo 0)
    local full_scans=$(cat /sys/kernel/mm/ksm/full_scans 2>/dev/null || echo 0)
    
    # Calculate sharing ratio
    local total_pages=$((pages_shared + pages_sharing + pages_unshared + pages_volatile))
    local sharing_ratio=0
    if [ $total_pages -gt 0 ]; then
        sharing_ratio=$((pages_sharing * 100 / total_pages))
    fi
    
    # Calculate memory saved (approximate)
    local memory_saved_mb=$(((pages_sharing * 4) / 1024))
    
    # Log metrics
    echo "[$TIMESTAMP] KSM Metrics: shared=$pages_shared, sharing=$pages_sharing, unshared=$pages_unshared, volatile=$pages_volatile, scans=$full_scans, ratio=${sharing_ratio}%, saved=${memory_saved_mb}MB" >> $LOG_FILE
    
    # Alert on low sharing ratio
    if [ $sharing_ratio -lt $SHARING_RATIO_THRESHOLD ]; then
        echo "[$TIMESTAMP] WARNING: Low sharing ratio (${sharing_ratio}% < ${SHARING_RATIO_THRESHOLD}%)" >> $LOG_FILE
    fi
}

# Function to check KSM health
check_ksm_health() {
    local ksm_run=$(cat /sys/kernel/mm/ksm/run 2>/dev/null || echo 0)
    
    if [ "$ksm_run" != "1" ]; then
        echo "[$TIMESTAMP] ERROR: KSM is not running (status: $ksm_run)" >> $LOG_FILE
        # Attempt to restart
        /usr/local/bin/ksm-optimization.sh start
        echo "[$TIMESTAMP] Attempted to restart KSM" >> $LOG_FILE
    fi
}

# Function to optimize KSM parameters based on current state
auto_optimize() {
    local mem_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    
    # Handle missing pages_scanned file gracefully (not available in all kernel versions)
    local pages_scanned=0
    if [ -f /sys/kernel/mm/ksm/pages_scanned ]; then
        pages_scanned=$(cat /sys/kernel/mm/ksm/pages_scanned 2>/dev/null || echo 0)
    else
        # Fallback: estimate based on full_scans and pages_to_scan
        local full_scans=$(cat /sys/kernel/mm/ksm/full_scans 2>/dev/null || echo 0)
        local pages_to_scan=$(cat /sys/kernel/mm/ksm/pages_to_scan 2>/dev/null || echo 1000)
        pages_scanned=$((full_scans * pages_to_scan))
    fi
    
    local pages_shared=$(cat /sys/kernel/mm/ksm/pages_shared 2>/dev/null || echo 0)
    
    # Calculate scan efficiency
    local scan_efficiency=0
    if [ $pages_scanned -gt 0 ]; then
        scan_efficiency=$((pages_shared * 100 / pages_scanned))
    fi
    
    echo "[$TIMESTAMP] Auto-optimize: mem=${mem_usage}%, efficiency=${scan_efficiency}% (scanned=${pages_scanned})" >> $LOG_FILE
    
    # Trigger optimization if needed
    if [ $mem_usage -gt $MEMORY_USAGE_THRESHOLD ] || [ $scan_efficiency -lt $SCAN_EFFICIENCY_THRESHOLD ]; then
        /usr/local/bin/ksm-optimization.sh optimize
        echo "[$TIMESTAMP] Triggered KSM optimization" >> $LOG_FILE
    fi
}

# Main execution
log_ksm_metrics
check_ksm_health
auto_optimize

# Cleanup old logs (keep last 1000 lines)
if [ -f "$LOG_FILE" ]; then
    tail -n 1000 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
fi