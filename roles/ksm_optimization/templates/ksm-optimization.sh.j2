#!/bin/bash
# KSM Optimization Script for KVM Host
# Auto-generated by Ansible - do not edit manually

source /etc/ksm/ksm.conf

LOG_FILE="/var/log/ksm-optimization.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

log_message() {
    echo "[$TIMESTAMP] $1" >> $LOG_FILE
}

# Function to apply KSM settings
apply_ksm_settings() {
    log_message "Applying KSM settings..."
    
    # Enable KSM
    echo $KSM_RUN > /sys/kernel/mm/ksm/run
    
    # Configure zero pages
    echo $KSM_USE_ZERO_PAGES > /sys/kernel/mm/ksm/use_zero_pages
    
    # Configure NUMA merging
    echo $KSM_MERGE_ACROSS_NODES > /sys/kernel/mm/ksm/merge_across_nodes
    
    # Configure page sharing
    echo $KSM_MAX_PAGE_SHARING > /sys/kernel/mm/ksm/max_page_sharing
    
    # Configure scanning parameters
    echo $KSM_SLEEP_MILLISECS > /sys/kernel/mm/ksm/sleep_millisecs
    echo $KSM_PAGES_TO_SCAN > /sys/kernel/mm/ksm/pages_to_scan
    
    # Configure stable node chains
    echo $KSM_STABLE_NODE_CHAINS_PRUNE_MILLISECS > /sys/kernel/mm/ksm/stable_node_chains_prune_millisecs
    
    log_message "KSM settings applied successfully"
}

# Function to get KSM statistics
get_ksm_stats() {
    echo "=== KSM Statistics ==="
    echo "Status: $(cat /sys/kernel/mm/ksm/run 2>/dev/null || echo 'N/A')"
    echo "Pages shared: $(cat /sys/kernel/mm/ksm/pages_shared 2>/dev/null || echo 'N/A')"
    echo "Pages sharing: $(cat /sys/kernel/mm/ksm/pages_sharing 2>/dev/null || echo 'N/A')"
    echo "Pages unshared: $(cat /sys/kernel/mm/ksm/pages_unshared 2>/dev/null || echo 'N/A')"
    echo "Pages volatile: $(cat /sys/kernel/mm/ksm/pages_volatile 2>/dev/null || echo 'N/A')"
    echo "Full scans: $(cat /sys/kernel/mm/ksm/full_scans 2>/dev/null || echo 'N/A')"
    echo "Stable node chains: $(cat /sys/kernel/mm/ksm/stable_node_chains 2>/dev/null || echo 'N/A')"
    echo "Stable node dups: $(cat /sys/kernel/mm/ksm/stable_node_dups 2>/dev/null || echo 'N/A')"
    
    # Show pages_scanned if available
    if [ -f /sys/kernel/mm/ksm/pages_scanned ]; then
        echo "Pages scanned: $(cat /sys/kernel/mm/ksm/pages_scanned 2>/dev/null || echo 'N/A')"
    else
        echo "Pages scanned: Not available (kernel version does not support this metric)"
    fi
}

# Function to optimize KSM based on system load
optimize_ksm() {
    local mem_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
    
    log_message "Memory usage: ${mem_usage}%, Load average: ${load_avg}"
    
    # Use integer comparison as fallback if bc is not available
    if command -v bc >/dev/null 2>&1; then
        # bc is available - use floating point comparison
        if (( $(echo "$mem_usage > 85" | bc -l) )); then
            # High memory usage - be more aggressive
            echo 5 > /sys/kernel/mm/ksm/sleep_millisecs
            echo 30000 > /sys/kernel/mm/ksm/pages_to_scan
            log_message "High memory usage detected - increasing KSM aggressiveness"
        elif (( $(echo "$mem_usage < 60" | bc -l) )); then
            # Low memory usage - be more conservative
            echo 20 > /sys/kernel/mm/ksm/sleep_millisecs
            echo 10000 > /sys/kernel/mm/ksm/pages_to_scan
            log_message "Low memory usage detected - reducing KSM aggressiveness"
        else
            # Normal settings
            echo $KSM_SLEEP_MILLISECS > /sys/kernel/mm/ksm/sleep_millisecs
            echo $KSM_PAGES_TO_SCAN > /sys/kernel/mm/ksm/pages_to_scan
            log_message "Normal memory usage - using default KSM settings"
        fi
    else
        # bc not available - use integer comparison
        if [ "$mem_usage" -gt 85 ]; then
            # High memory usage - be more aggressive
            echo 5 > /sys/kernel/mm/ksm/sleep_millisecs
            echo 30000 > /sys/kernel/mm/ksm/pages_to_scan
            log_message "High memory usage detected - increasing KSM aggressiveness (using integer comparison)"
        elif [ "$mem_usage" -lt 60 ]; then
            # Low memory usage - be more conservative
            echo 20 > /sys/kernel/mm/ksm/sleep_millisecs
            echo 10000 > /sys/kernel/mm/ksm/pages_to_scan
            log_message "Low memory usage detected - reducing KSM aggressiveness (using integer comparison)"
        else
            # Normal settings
            echo $KSM_SLEEP_MILLISECS > /sys/kernel/mm/ksm/sleep_millisecs
            echo $KSM_PAGES_TO_SCAN > /sys/kernel/mm/ksm/pages_to_scan
            log_message "Normal memory usage - using default KSM settings (using integer comparison)"
        fi
    fi
}

# Main execution
case "$1" in
    start)
        log_message "Starting KSM optimization"
        apply_ksm_settings
        optimize_ksm
        ;;
    stop)
        log_message "Stopping KSM"
        echo 0 > /sys/kernel/mm/ksm/run
        ;;
    restart)
        log_message "Restarting KSM optimization"
        echo 0 > /sys/kernel/mm/ksm/run
        sleep 2
        apply_ksm_settings
        optimize_ksm
        ;;
    optimize)
        log_message "Optimizing KSM settings"
        optimize_ksm
        ;;
    stats)
        get_ksm_stats
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|optimize|stats}"
        exit 1
        ;;
esac

exit 0