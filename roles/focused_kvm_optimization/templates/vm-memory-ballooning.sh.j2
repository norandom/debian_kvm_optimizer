#!/bin/bash
# VM Memory Ballooning Optimization
# Auto-generated by Ansible - do not edit manually

LOG_FILE="/var/log/vm-memory-ballooning.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# VMs to exclude from memory ballooning (space-separated list)
EXCLUDED_VMS="{{ vm_ballooning_exclusions | default('') }}"

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" >> $LOG_FILE
}

# Function to check if VM should be excluded
is_vm_excluded() {
    local vm_name="$1"
    for excluded in $EXCLUDED_VMS; do
        if [[ "$vm_name" == "$excluded" ]]; then
            return 0  # VM is excluded
        fi
    done
    return 1  # VM is not excluded
}

# Function to get host memory stats
get_host_memory_stats() {
    local total_mem=$(free -m | awk 'NR==2{print $2}')
    local used_mem=$(free -m | awk 'NR==2{print $3}')
    local free_mem=$(free -m | awk 'NR==2{print $4}')
    local available_mem=$(free -m | awk 'NR==2{print $7}')
    
    local mem_usage_percent=$((used_mem * 100 / total_mem))
    
    echo "$total_mem $used_mem $free_mem $available_mem $mem_usage_percent"
}

# Function to optimize VM memory allocation
optimize_vm_memory() {
    local vm_name=$1
    
    # Skip excluded VMs
    if is_vm_excluded "$vm_name"; then
        log_message "Skipping excluded VM: $vm_name"
        return 0
    fi
    
    local vm_state=$(virsh domstate "$vm_name" 2>/dev/null)
    
    if [[ "$vm_state" == "running" ]]; then
        # Get VM memory info
        local vm_info=$(virsh dominfo "$vm_name" 2>/dev/null)
        local max_memory=$(echo "$vm_info" | grep "Max memory:" | awk '{print $3}')
        local used_memory=$(echo "$vm_info" | grep "Used memory:" | awk '{print $3}')
        
        if [[ -n "$max_memory" && -n "$used_memory" ]]; then
            local memory_stats=$(get_host_memory_stats)
            local available_mem=$(echo $memory_stats | awk '{print $4}')
            local mem_usage_percent=$(echo $memory_stats | awk '{print $5}')
            
            # If host memory usage is high (>85%), try to balloon down VMs
            if [[ $mem_usage_percent -gt 85 ]]; then
                local current_mem=$(virsh dommemstat "$vm_name" 2>/dev/null | grep "actual" | awk '{print $2}')
                if [[ -n "$current_mem" ]]; then
                    local target_mem=$((current_mem * 90 / 100))  # Reduce by 10%
                    virsh setmem "$vm_name" "${target_mem}k" 2>/dev/null
                    log_message "Ballooned down VM $vm_name: ${current_mem}k -> ${target_mem}k (host memory: ${mem_usage_percent}%)"
                fi
            # If host memory usage is low (<60%), allow VMs to expand
            elif [[ $mem_usage_percent -lt 60 ]]; then
                local current_mem=$(virsh dommemstat "$vm_name" 2>/dev/null | grep "actual" | awk '{print $2}')
                local max_mem=$(virsh dommemstat "$vm_name" 2>/dev/null | grep "maximum" | awk '{print $2}')
                if [[ -n "$current_mem" && -n "$max_mem" && $current_mem -lt $max_mem ]]; then
                    local target_mem=$((current_mem * 105 / 100))  # Increase by 5%
                    if [[ $target_mem -le $max_mem ]]; then
                        virsh setmem "$vm_name" "${target_mem}k" 2>/dev/null
                        log_message "Ballooned up VM $vm_name: ${current_mem}k -> ${target_mem}k (host memory: ${mem_usage_percent}%)"
                    fi
                fi
            fi
        fi
    fi
}

# Function to check swap pressure
check_swap_pressure() {
    local swap_total=$(free -m | awk 'NR==3{print $2}')
    local swap_used=$(free -m | awk 'NR==3{print $3}')
    
    if [[ $swap_total -gt 0 ]]; then
        local swap_percent=$((swap_used * 100 / swap_total))
        
        if [[ $swap_percent -gt 50 ]]; then
            log_message "HIGH SWAP PRESSURE: ${swap_used}MB/${swap_total}MB (${swap_percent}%) - triggering emergency ballooning"
            
            # Emergency ballooning - reduce all VMs by 15% (except excluded ones)
            virsh list --name | while read vm; do
                if [[ -n "$vm" ]]; then
                    if is_vm_excluded "$vm"; then
                        log_message "EMERGENCY: Skipping excluded VM $vm during emergency ballooning"
                    else
                        local current_mem=$(virsh dommemstat "$vm" 2>/dev/null | grep "actual" | awk '{print $2}')
                        if [[ -n "$current_mem" ]]; then
                            local target_mem=$((current_mem * 85 / 100))  # Reduce by 15%
                            virsh setmem "$vm" "${target_mem}k" 2>/dev/null
                            log_message "EMERGENCY: Ballooned down VM $vm: ${current_mem}k -> ${target_mem}k"
                        fi
                    fi
                fi
            done
        fi
    fi
}

# Function to check system load
check_system_load() {
    local cpu_count=$(nproc)
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{gsub(/^[ \t]+/, "", $1); print $1}' | tr -d ',')
    
    # Use bc for floating point comparison if available, otherwise use integer approximation
    if command -v bc >/dev/null 2>&1; then
        local load_threshold=$(echo "$cpu_count * 0.8" | bc)
        if (( $(echo "$load_avg > $load_threshold" | bc -l) )); then
            log_message "High system load detected: $load_avg (threshold: $load_threshold for $cpu_count CPUs) - skipping memory ballooning"
            return 1
        fi
    else
        # Fallback: convert to integer (load * 100) for comparison
        local load_int=$(echo "$load_avg * 100" | cut -d. -f1 2>/dev/null || echo "${load_avg//./}")
        local threshold_int=$((cpu_count * 80))  # 80% of CPU count * 100
        if [[ $load_int -gt $threshold_int ]]; then
            log_message "High system load detected: $load_avg (threshold: 0.8 per CPU for $cpu_count CPUs) - skipping memory ballooning"
            return 1
        fi
    fi
    
    log_message "System load acceptable: $load_avg (CPUs: $cpu_count) - proceeding with memory ballooning"
    return 0
}

# Main execution
log_message "Starting VM memory ballooning optimization"

# Check system load before proceeding
if ! check_system_load; then
    log_message "Aborting memory ballooning due to high system load"
    exit 0
fi

# Get host memory stats
memory_stats=$(get_host_memory_stats)
log_message "Host memory: $(echo $memory_stats | awk '{print $2"MB used/"$1"MB total ("$5"%), "$4"MB available"}')"

# Check for swap pressure first
check_swap_pressure

# Optimize memory for each running VM
virsh list --name | while read vm; do
    if [[ -n "$vm" ]]; then
        optimize_vm_memory "$vm"
    fi
done

# Log final memory state
final_memory_stats=$(get_host_memory_stats)
log_message "Final host memory: $(echo $final_memory_stats | awk '{print $2"MB used/"$1"MB total ("$5"%), "$4"MB available"}')"

# Rotate log if too large
if [[ $(wc -l < "$LOG_FILE") -gt 5000 ]]; then
    tail -n 2500 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
fi

log_message "VM memory ballooning optimization completed"