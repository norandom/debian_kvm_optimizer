#!/bin/bash
# VM Performance Monitoring
# Auto-generated by Ansible - do not edit manually

LOG_FILE="/var/log/vm-performance-monitor.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" >> $LOG_FILE
}

# Function to get VM performance stats
get_vm_performance() {
    local vm_name=$1
    local vm_state=$(virsh domstate "$vm_name" 2>/dev/null)
    
    if [[ "$vm_state" == "running" ]]; then
        # Get CPU stats
        local cpu_stats=$(virsh cpu-stats "$vm_name" 2>/dev/null)
        local cpu_time=$(echo "$cpu_stats" | grep "cpu_time" | awk '{print $2}')
        
        # Get memory stats
        local mem_stats=$(virsh dommemstat "$vm_name" 2>/dev/null)
        local actual_mem=$(echo "$mem_stats" | grep "actual" | awk '{print $2}')
        local available_mem=$(echo "$mem_stats" | grep "available" | awk '{print $2}')
        
        # Get block I/O stats
        local block_stats=$(virsh domblkstat "$vm_name" 2>/dev/null)
        
        log_message "VM $vm_name: CPU=${cpu_time}ns, MEM=${actual_mem}k/${available_mem}k"
        
        # Check for memory pressure in VM
        if [[ -n "$actual_mem" && -n "$available_mem" ]]; then
            local mem_usage_percent=$((actual_mem * 100 / available_mem))
            if [[ $mem_usage_percent -gt 90 ]]; then
                log_message "WARNING: VM $vm_name memory usage at ${mem_usage_percent}%"
            fi
        fi
    fi
}

# Function to check overall system performance
check_system_performance() {
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
    local cpu_count={{ ansible_processor_vcpus }}
    
    # Check if load average is high
    if command -v bc >/dev/null 2>&1; then
        # bc is available - use floating point comparison
        if (( $(echo "$load_avg > $cpu_count" | bc -l) )); then
            log_message "WARNING: High load average: $load_avg (CPU cores: $cpu_count)"
        fi
    else
        # bc not available - use awk for floating point comparison
        if awk "BEGIN {exit !($load_avg > $cpu_count)}"; then
            log_message "WARNING: High load average: $load_avg (CPU cores: $cpu_count)"
        fi
    fi
    
    # Check KSM effectiveness
    local ksm_pages_shared=$(cat /sys/kernel/mm/ksm/pages_shared 2>/dev/null)
    local ksm_pages_sharing=$(cat /sys/kernel/mm/ksm/pages_sharing 2>/dev/null)
    
    if [[ -n "$ksm_pages_shared" && -n "$ksm_pages_sharing" ]]; then
        local ksm_saved_mb=$(( (ksm_pages_shared * 4) / 1024 ))
        log_message "KSM: ${ksm_pages_shared} pages shared, ${ksm_saved_mb}MB saved"
    fi
}

# Function to check CPU isolation effectiveness
check_cpu_isolation() {
    # Check if host processes are properly isolated to core 0
    local host_processes_on_wrong_cores=0
    
    for process in systemd kthreadd ksoftirqd; do
        local pids=$(pgrep -f "^$process" 2>/dev/null)
        if [[ -n "$pids" ]]; then
            for pid in $pids; do
                if [[ -d "/proc/$pid" ]]; then
                    local affinity=$(taskset -cp $pid 2>/dev/null | grep -o '[0-9-,]*$')
                    if [[ "$affinity" != "0" && "$affinity" != "0-0" ]]; then
                        host_processes_on_wrong_cores=1
                        log_message "WARNING: Host process $process (PID: $pid) not isolated to core 0: $affinity"
                    fi
                fi
            done
        fi
    done
    
    if [[ $host_processes_on_wrong_cores -eq 0 ]]; then
        log_message "CPU isolation: Host processes properly isolated to core 0"
    fi
}

# Main execution
log_message "Starting VM performance monitoring"

# Check system performance
check_system_performance

# Check CPU isolation
check_cpu_isolation

# Monitor each VM
virsh list --name | while read vm; do
    if [[ -n "$vm" ]]; then
        get_vm_performance "$vm"
    fi
done

# Log host resource usage
log_message "Host resources: $(free -h | awk 'NR==2{print $3"/"$2" RAM used"}'), load: $(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')"

# Check swap usage
local swap_used=$(free -m | awk 'NR==3{print $3}')
if [[ $swap_used -gt 1000 ]]; then
    log_message "WARNING: High swap usage: ${swap_used}MB"
fi

# Rotate log if too large
if [[ $(wc -l < "$LOG_FILE") -gt 10000 ]]; then
    tail -n 5000 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
fi

log_message "VM performance monitoring completed"