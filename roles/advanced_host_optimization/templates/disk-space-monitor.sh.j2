#!/bin/bash
# Critical Disk Space Monitoring Script
# Auto-generated by Ansible - do not edit manually

LOG_FILE="/var/log/disk-space-monitor.log"
ALERT_FILE="/var/log/disk-space-alerts.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Critical thresholds
CRITICAL_THRESHOLD=95
WARNING_THRESHOLD=90

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" >> $LOG_FILE
}

# Function to log alerts
log_alert() {
    echo "[$TIMESTAMP] ALERT: $1" >> $ALERT_FILE
    echo "[$TIMESTAMP] ALERT: $1" >> $LOG_FILE
}

# Function to check disk usage
check_disk_usage() {
    local mountpoint=$1
    local usage=$(df -h "$mountpoint" | awk 'NR==2 {print $5}' | tr -d '%')
    
    if [[ $usage -ge $CRITICAL_THRESHOLD ]]; then
        log_alert "$mountpoint is at ${usage}% capacity - CRITICAL"
        # Emergency cleanup actions
        if [[ "$mountpoint" == "/home" ]]; then
            emergency_home_cleanup
        fi
        return 2
    elif [[ $usage -ge $WARNING_THRESHOLD ]]; then
        log_alert "$mountpoint is at ${usage}% capacity - WARNING"
        return 1
    else
        log_message "$mountpoint is at ${usage}% capacity - OK"
        return 0
    fi
}

# Emergency cleanup for /home
emergency_home_cleanup() {
    log_alert "Initiating emergency cleanup for /home"
    
    # Clean old BitTorrent files (> 30 days)
    find /home -name "*.torrent" -type f -mtime +30 -delete 2>/dev/null
    
    # Clean old downloads (> 7 days)
    find /home -name "*.tmp" -type f -mtime +7 -delete 2>/dev/null
    find /home -name "*.part" -type f -mtime +7 -delete 2>/dev/null
    
    # Clean old logs in user directories
    find /home -name "*.log" -type f -mtime +3 -delete 2>/dev/null
    
    # Clean thumbnails cache
    find /home -name ".cache" -type d -exec rm -rf {}/thumbnails \; 2>/dev/null
    
    # Clean browser cache
    find /home -name ".cache" -type d -exec find {} -name "*cache*" -type d -exec rm -rf {} \; 2>/dev/null
    
    local freed_space=$(df -h /home | awk 'NR==2 {print $4}')
    log_alert "Emergency cleanup completed. Available space: $freed_space"
}

# Function to check VM disk usage
check_vm_storage() {
    local vm_usage=$(df -h /virt | awk 'NR==2 {print $5}' | tr -d '%')
    
    if [[ $vm_usage -ge 90 ]]; then
        log_alert "/virt (VM storage) is at ${vm_usage}% capacity"
        
        # Check for unused VM images
        log_message "Checking for unused VM images..."
        virsh list --all --name | while read vm; do
            if [[ -n "$vm" ]]; then
                state=$(virsh domstate "$vm" 2>/dev/null)
                if [[ "$state" == "shut off" ]]; then
                    log_message "VM '$vm' is shut off"
                fi
            fi
        done
    fi
}

# Function to get top space consumers
get_top_space_consumers() {
    log_message "=== Top Space Consumers ===" 
    
    # Top directories in /home
    log_message "Top directories in /home:"
    du -h /home | sort -hr | head -10 >> $LOG_FILE
    
    # Top files in /home
    log_message "Top files in /home:"
    find /home -type f -exec du -h {} + 2>/dev/null | sort -hr | head -20 >> $LOG_FILE
    
    # VM disk usage
    log_message "VM disk usage:"
    du -h /virt/*.qcow2 2>/dev/null | sort -hr >> $LOG_FILE
}

# Main execution
log_message "Starting disk space monitoring"

# Check critical filesystems
check_disk_usage "/home"
HOME_STATUS=$?

check_disk_usage "/"
ROOT_STATUS=$?

check_disk_usage "/virt"
VIRT_STATUS=$?

# Check VM storage specifically
check_vm_storage

# If any filesystem is in warning or critical state, get detailed info
if [[ $HOME_STATUS -ge 1 || $ROOT_STATUS -ge 1 || $VIRT_STATUS -ge 1 ]]; then
    get_top_space_consumers
fi

# Log current usage summary
log_message "=== Current Disk Usage Summary ==="
df -h | grep -E "(Filesystem|/dev/)" >> $LOG_FILE

# Rotate log files if they get too large
if [[ $(wc -l < "$LOG_FILE") -gt 10000 ]]; then
    tail -n 5000 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
fi

if [[ $(wc -l < "$ALERT_FILE") -gt 1000 ]]; then
    tail -n 500 "$ALERT_FILE" > "$ALERT_FILE.tmp" && mv "$ALERT_FILE.tmp" "$ALERT_FILE"
fi

log_message "Disk space monitoring completed"