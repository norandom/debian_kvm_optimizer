#!/bin/bash
# Network Tuning Script
# Auto-generated by Ansible - do not edit manually

LOG_FILE="/var/log/network-tuning.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

echo "[$TIMESTAMP] Applying network tuning" >> $LOG_FILE

# Configure TCP buffer sizes
sysctl -w net.core.rmem_max={{ network_optimization.rmem_max }}
sysctl -w net.core.wmem_max={{ network_optimization.wmem_max }}
sysctl -w net.ipv4.tcp_rmem='{{ network_optimization.tcp_rmem }}'
sysctl -w net.ipv4.tcp_wmem='{{ network_optimization.tcp_wmem }}'

# Configure ARP filter
echo {{ network_optimization.arp_filter }} > /proc/sys/net/ipv4/conf/all/arp_filter

# Configure TCP congestion control
sysctl -w net.ipv4.tcp_congestion_control={{ network_optimization.tcp_congestion_control }}

# Configure network interface optimizations
{% if network_optimization.disable_tso %}
ethtool -K {{ network_interfaces.primary }} tso off
{% endif %}
{% if network_optimization.disable_gso %}
ethtool -K {{ network_interfaces.primary }} gso off
{% endif %}

# Additional network optimizations for virtualization
sysctl -w net.core.netdev_max_backlog=5000
sysctl -w net.ipv4.tcp_keepalive_time=1200
sysctl -w net.ipv4.tcp_keepalive_probes=3
sysctl -w net.ipv4.tcp_keepalive_intvl=75

# Bridge optimizations
echo 0 > /proc/sys/net/bridge/bridge-nf-call-iptables || true
echo 0 > /proc/sys/net/bridge/bridge-nf-call-ip6tables || true

# Log applied tuning
echo "[$TIMESTAMP] Network tuning applied successfully" >> $LOG_FILE
echo "[$TIMESTAMP] TCP congestion control: {{ network_optimization.tcp_congestion_control }}" >> $LOG_FILE
echo "[$TIMESTAMP] Buffer sizes: rmem_max={{ network_optimization.rmem_max }}, wmem_max={{ network_optimization.wmem_max }}" >> $LOG_FILE