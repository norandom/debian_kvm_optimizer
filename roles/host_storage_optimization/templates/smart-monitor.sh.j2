#!/bin/bash
# SMART Disk Health Monitoring Script
# Auto-generated by Ansible - do not edit manually

LOG_FILE="/var/log/smart-monitor.log"
ALERT_FILE="/var/log/smart-alerts.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Function to check SMART health
check_smart_health() {
    local disk=$1
    local disk_type=$2
    
    # Check if smartctl is available
    if ! command -v smartctl &> /dev/null; then
        echo "[$TIMESTAMP] WARNING: smartctl not available, skipping SMART monitoring" >> $ALERT_FILE
        return
    fi
    
    # Check if device supports SMART
    if ! smartctl -i $disk &>/dev/null; then
        echo "[$TIMESTAMP] INFO: SMART not supported or device not accessible for $disk" >> $LOG_FILE
        return
    fi
    
    # Get SMART health status
    HEALTH_STATUS=$(smartctl -H $disk 2>/dev/null | grep -E "PASSED|FAILED|OK" | awk '{print $NF}')
    
    if [[ -z "$HEALTH_STATUS" ]]; then
        echo "[$TIMESTAMP] INFO: Unable to get SMART health status for $disk (may not support SMART)" >> $LOG_FILE
        return
    fi
    
    # Log basic status
    echo "[$TIMESTAMP] $disk: Health=$HEALTH_STATUS" >> $LOG_FILE
    
    # Check for failures
    if [[ "$HEALTH_STATUS" == "FAILED" ]]; then
        echo "[$TIMESTAMP] CRITICAL: $disk SMART health check FAILED!" >> $ALERT_FILE
        echo "[$TIMESTAMP] CRITICAL: $disk SMART health check FAILED!" >> $LOG_FILE
    fi
    
    # Get detailed attributes based on disk type
    if [[ "$disk_type" == "sata" ]]; then
        # Check critical SATA/SAS attributes
        REALLOCATED=$(smartctl -A $disk 2>/dev/null | grep "Reallocated_Sector_Ct" | awk '{print $10}')
        PENDING=$(smartctl -A $disk 2>/dev/null | grep "Current_Pending_Sector" | awk '{print $10}')
        UNCORRECTABLE=$(smartctl -A $disk 2>/dev/null | grep "Offline_Uncorrectable" | awk '{print $10}')
        TEMPERATURE=$(smartctl -A $disk 2>/dev/null | grep "Temperature_Celsius" | awk '{print $10}')
        
        # Alert on critical values
        if [[ -n "$REALLOCATED" && "$REALLOCATED" -gt 0 ]]; then
            echo "[$TIMESTAMP] WARNING: $disk has $REALLOCATED reallocated sectors" >> $ALERT_FILE
        fi
        
        if [[ -n "$PENDING" && "$PENDING" -gt 0 ]]; then
            echo "[$TIMESTAMP] WARNING: $disk has $PENDING pending sectors" >> $ALERT_FILE
        fi
        
        if [[ -n "$UNCORRECTABLE" && "$UNCORRECTABLE" -gt 0 ]]; then
            echo "[$TIMESTAMP] CRITICAL: $disk has $UNCORRECTABLE uncorrectable errors" >> $ALERT_FILE
        fi
        
        if [[ -n "$TEMPERATURE" && "$TEMPERATURE" -gt 55 ]]; then
            echo "[$TIMESTAMP] WARNING: $disk temperature is ${TEMPERATURE}°C (threshold: 55°C)" >> $ALERT_FILE
        fi
        
        echo "[$TIMESTAMP] $disk: Reallocated=$REALLOCATED, Pending=$PENDING, Uncorrectable=$UNCORRECTABLE, Temp=${TEMPERATURE}°C" >> $LOG_FILE
        
    elif [[ "$disk_type" == "nvme" ]]; then
        # Check NVMe specific attributes
        NVME_LOG=$(nvme smart-log $disk 2>/dev/null)
        
        if [[ -n "$NVME_LOG" ]]; then
            TEMPERATURE=$(echo "$NVME_LOG" | grep "temperature" | awk '{print $3}')
            AVAILABLE_SPARE=$(echo "$NVME_LOG" | grep "available_spare" | awk '{print $3}' | tr -d '%')
            PERCENTAGE_USED=$(echo "$NVME_LOG" | grep "percentage_used" | awk '{print $3}' | tr -d '%')
            CRITICAL_WARNING=$(echo "$NVME_LOG" | grep "critical_warning" | awk '{print $3}')
            
            # Alert on critical values
            if [[ -n "$AVAILABLE_SPARE" && "$AVAILABLE_SPARE" -lt 10 ]]; then
                echo "[$TIMESTAMP] CRITICAL: $disk available spare is only ${AVAILABLE_SPARE}%" >> $ALERT_FILE
            fi
            
            if [[ -n "$PERCENTAGE_USED" && "$PERCENTAGE_USED" -gt 90 ]]; then
                echo "[$TIMESTAMP] WARNING: $disk is ${PERCENTAGE_USED}% worn" >> $ALERT_FILE
            fi
            
            if [[ -n "$CRITICAL_WARNING" && "$CRITICAL_WARNING" != "0" ]]; then
                echo "[$TIMESTAMP] CRITICAL: $disk has critical warning flag: $CRITICAL_WARNING" >> $ALERT_FILE
            fi
            
            # Convert Kelvin to Celsius for temperature
            if [[ -n "$TEMPERATURE" ]]; then
                TEMP_C=$((TEMPERATURE - 273))
                if [[ $TEMP_C -gt 70 ]]; then
                    echo "[$TIMESTAMP] WARNING: $disk temperature is ${TEMP_C}°C (threshold: 70°C)" >> $ALERT_FILE
                fi
                echo "[$TIMESTAMP] $disk: Spare=${AVAILABLE_SPARE}%, Used=${PERCENTAGE_USED}%, Temp=${TEMP_C}°C, Warning=$CRITICAL_WARNING" >> $LOG_FILE
            fi
        fi
    fi
}

# Main monitoring loop
echo "[$TIMESTAMP] Starting SMART disk monitoring" >> $LOG_FILE

# Check if smartctl is available
if ! command -v smartctl &> /dev/null; then
    echo "[$TIMESTAMP] WARNING: smartctl not installed. Install with: apt install smartmontools" >> $ALERT_FILE
    echo "[$TIMESTAMP] SMART monitoring skipped - smartctl not available" >> $LOG_FILE
else
    # Check SATA/SAS drives
    for disk in /dev/sd[a-z]; do
        if [[ -e $disk ]]; then
            check_smart_health $disk "sata"
        fi
    done
    
    # Check NVMe drives
    for disk in /dev/nvme[0-9]n[0-9]; do
        if [[ -e $disk ]]; then
            check_smart_health $disk "nvme"
        fi
    done
fi

# Check RAID array health
if [[ -f /proc/mdstat ]]; then
    echo "[$TIMESTAMP] === RAID Status ===" >> $LOG_FILE
    RAID_STATUS=$(cat /proc/mdstat)
    echo "$RAID_STATUS" >> $LOG_FILE
    
    # Check for degraded arrays
    if echo "$RAID_STATUS" | grep -q "\[.*_.*\]"; then
        echo "[$TIMESTAMP] CRITICAL: RAID array is degraded!" >> $ALERT_FILE
    fi
fi

# Log rotation
if [[ $(wc -l < "$LOG_FILE") -gt 10000 ]]; then
    tail -n 5000 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
fi

if [[ $(wc -l < "$ALERT_FILE") -gt 1000 ]]; then
    tail -n 500 "$ALERT_FILE" > "$ALERT_FILE.tmp" && mv "$ALERT_FILE.tmp" "$ALERT_FILE"
fi

echo "[$TIMESTAMP] SMART disk monitoring completed" >> $LOG_FILE