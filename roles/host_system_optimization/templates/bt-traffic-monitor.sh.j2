#!/bin/bash
# BitTorrent Traffic Monitoring Script
# Auto-generated by Ansible - do not edit manually

LOG_FILE="/var/log/bt-traffic-monitor.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Function to get NAT rule statistics
get_nat_stats() {
    echo "[$TIMESTAMP] === BitTorrent NAT Rule Statistics ===" >> $LOG_FILE
    
    # SSH forwarding (port 2223)
    SSH_STATS=$(iptables -t nat -L PREROUTING -n -v | grep "dpt:2223" | awk '{print $1, $2}')
    echo "[$TIMESTAMP] SSH (2223): $SSH_STATS" >> $LOG_FILE
    
    # BitTorrent direct (port 51413)
    BT_DIRECT_STATS=$(iptables -t nat -L PREROUTING -n -v | grep "dpt:51413" | awk '{print $1, $2}')
    echo "[$TIMESTAMP] BitTorrent Direct (51413): $BT_DIRECT_STATS" >> $LOG_FILE
    
    # BitTorrent range (6881-6889)
    for port in {6881..6889}; do
        BT_RANGE_STATS=$(iptables -t nat -L PREROUTING -n -v | grep "dpt:$port" | awk '{print $1, $2}')
        if [[ -n "$BT_RANGE_STATS" ]]; then
            echo "[$TIMESTAMP] BitTorrent Range ($port): $BT_RANGE_STATS" >> $LOG_FILE
        fi
    done
}

# Function to check connection tracking
check_conntrack() {
    CONNTRACK_CURRENT=$(cat /proc/net/nf_conntrack | wc -l)
    CONNTRACK_MAX=$(cat /proc/sys/net/netfilter/nf_conntrack_max)
    CONNTRACK_PCT=$((CONNTRACK_CURRENT * 100 / CONNTRACK_MAX))
    
    echo "[$TIMESTAMP] Connection Tracking: $CONNTRACK_CURRENT/$CONNTRACK_MAX (${CONNTRACK_PCT}%)" >> $LOG_FILE
    
    if [[ $CONNTRACK_PCT -gt 80 ]]; then
        echo "[$TIMESTAMP] WARNING: Connection tracking at ${CONNTRACK_PCT}%" >> $LOG_FILE
    fi
    
    # Count BitTorrent connections
    BT_CONNECTIONS=$(cat /proc/net/nf_conntrack | grep -E "sport=51413|dport=51413|sport=688[1-9]|dport=688[1-9]" | wc -l)
    echo "[$TIMESTAMP] BitTorrent Connections: $BT_CONNECTIONS" >> $LOG_FILE
}

# Function to check network interface statistics
check_interface_stats() {
    echo "[$TIMESTAMP] === Network Interface Statistics ===" >> $LOG_FILE
    
    # Get interface statistics
    RX_PACKETS=$(cat /sys/class/net/{{ host_network.primary_interface }}/statistics/rx_packets)
    TX_PACKETS=$(cat /sys/class/net/{{ host_network.primary_interface }}/statistics/tx_packets)
    RX_BYTES=$(cat /sys/class/net/{{ host_network.primary_interface }}/statistics/rx_bytes)
    TX_BYTES=$(cat /sys/class/net/{{ host_network.primary_interface }}/statistics/tx_bytes)
    RX_ERRORS=$(cat /sys/class/net/{{ host_network.primary_interface }}/statistics/rx_errors)
    TX_ERRORS=$(cat /sys/class/net/{{ host_network.primary_interface }}/statistics/tx_errors)
    
    echo "[$TIMESTAMP] {{ host_network.primary_interface }}: RX $RX_PACKETS pkts ($RX_BYTES bytes), TX $TX_PACKETS pkts ($TX_BYTES bytes)" >> $LOG_FILE
    echo "[$TIMESTAMP] {{ host_network.primary_interface }}: RX errors $RX_ERRORS, TX errors $TX_ERRORS" >> $LOG_FILE
    
    # Alert on high error rates
    if [[ $RX_ERRORS -gt 1000 ]]; then
        echo "[$TIMESTAMP] WARNING: High RX error count: $RX_ERRORS" >> $LOG_FILE
    fi
    
    if [[ $TX_ERRORS -gt 100 ]]; then
        echo "[$TIMESTAMP] WARNING: High TX error count: $TX_ERRORS" >> $LOG_FILE
    fi
}

# Function to check memory pressure
check_memory_pressure() {
    echo "[$TIMESTAMP] === Memory Pressure ===" >> $LOG_FILE
    
    # Get memory statistics
    MEMORY_TOTAL=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    MEMORY_AVAILABLE=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
    MEMORY_USED=$((MEMORY_TOTAL - MEMORY_AVAILABLE))
    MEMORY_PCT=$((MEMORY_USED * 100 / MEMORY_TOTAL))
    
    SWAP_TOTAL=$(grep SwapTotal /proc/meminfo | awk '{print $2}')
    SWAP_FREE=$(grep SwapFree /proc/meminfo | awk '{print $2}')
    SWAP_USED=$((SWAP_TOTAL - SWAP_FREE))
    
    echo "[$TIMESTAMP] Memory: ${MEMORY_PCT}% used, Swap: ${SWAP_USED}KB used" >> $LOG_FILE
    
    # Alert on high memory usage
    if [[ $MEMORY_PCT -gt 85 ]]; then
        echo "[$TIMESTAMP] WARNING: High memory usage: ${MEMORY_PCT}%" >> $LOG_FILE
    fi
    
    if [[ $SWAP_USED -gt 1048576 ]]; then  # 1GB in KB
        echo "[$TIMESTAMP] WARNING: High swap usage: ${SWAP_USED}KB" >> $LOG_FILE
    fi
}

# Function to check system load
check_system_load() {
    LOAD_1MIN=$(cat /proc/loadavg | awk '{print $1}')
    LOAD_5MIN=$(cat /proc/loadavg | awk '{print $2}')
    LOAD_15MIN=$(cat /proc/loadavg | awk '{print $3}')
    
    echo "[$TIMESTAMP] System Load: 1min=$LOAD_1MIN, 5min=$LOAD_5MIN, 15min=$LOAD_15MIN" >> $LOG_FILE
    
    # Alert on high load (> CPU count)
    if (( $(echo "$LOAD_1MIN > {{ host_specs.cpu_threads }}" | bc -l) )); then
        echo "[$TIMESTAMP] WARNING: High 1-minute load: $LOAD_1MIN" >> $LOG_FILE
    fi
}

# Main execution
get_nat_stats
check_conntrack
check_interface_stats
check_memory_pressure
check_system_load

# Log rotation
if [[ $(wc -l < "$LOG_FILE") -gt 5000 ]]; then
    tail -n 2500 "$LOG_FILE" > "$LOG_FILE.tmp" && mv "$LOG_FILE.tmp" "$LOG_FILE"
fi